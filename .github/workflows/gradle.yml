# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Picketing CI

on:
  push:
    branches: [ "develop", "master" ]
  pull_request:
    branches: [ '*' ]

permissions:
  id-token: write
  contents: read
  checks: write

jobs:
  # naver code style check
  check_code_style:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew
        shell: bash

      - name: Check Source Code format
        run: ./gradlew checkstyleMain
        shell: bash


  # test code check
  check_test_code:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew
        shell: bash

      - name: Build with Gradle
        run: ./gradlew clean build -x checkstyleTest -x checkstyleMain
        shell: bash

      - name: Test with Gradle
        run: ./gradlew test

      - name: Create PR comment for test failure
        uses: mikepenz/action-junit-report@v3
        if: ${{ always() }}
        with:
          report_paths: app/build/test-results/**/*.xml
          token: ${{ secrets.TOKEN }}
